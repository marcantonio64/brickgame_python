"""
This module contains functions used to create the following screens:

* background
* victory screen
* defeat screen
* high scores
* game previews

All images will be generated by being rapidly flashed, screenshotted,
and saved to `screens/`.

Except for `high_scores`, each of the screens is made of an arrangement
of dark `Block`s on top of a 10x20 grid of lighter `Block`s.

Running this module will overwrite the contents of `screens/`.

.. _`_screen_generator`:
"""

import os
import json
import tkinter as tk
from PIL import ImageGrab
from time import sleep
from .constants import *
from .client import *
from .block import Block
from .games import high_scores_dir

__all__ = ["show_high_scores"]

screens_dir = os.path.join(os.path.dirname(__file__), "screens")


def create_image(func):
    """ A decorator with general commands for image generation. """

    def wrapper(file_name, source):
        """
        Same args as `func`.

        Parameters
        ----------
        file_name : str
            Name of the file or the path to it.
        source : Type[Client]
            A class with ``window`` and ``canvas`` attributes.

        Raises
        ------
        AbsentWindowOrCanvasError
            If the ``source`` parameter has incorrect ``window`` or ``canvas`` attributes.
        """

        # Check for correct `source`.
        if not has_window_and_canvas(source):
            raise AbsentWindowOrCanvasError("source")

        window = source.window  # Extract `window`
        canvas = source.canvas  # Extract `canvas`
        
        # Draw a border.
        canvas.create_rectangle(SIZE_CORRECTION + BORDER_WIDTH,
                                SIZE_CORRECTION + BORDER_WIDTH,
                                SIZE_CORRECTION + WINDOW_WIDTH,
                                SIZE_CORRECTION + WINDOW_HEIGHT,
                                fill=BACK_COLOR,
                                width=BORDER_WIDTH)
        # Draw a grid.
        for i in range(10):
            for j in range(20):
                Block(i, j, source, color=SHADE_COLOR)
        
        # Function call.
        func(file_name, source)
        
        # Render the image.
        canvas.update()
        # Screen capture the `canvas`'s content.
        area = (window.winfo_rootx() + WHITE_BORDER,
                window.winfo_rooty() + WHITE_BORDER,
                window.winfo_rootx() + canvas.winfo_width() - WHITE_BORDER,
                window.winfo_rooty() + canvas.winfo_height() - WHITE_BORDER)
        screenshot = ImageGrab.grab(bbox=area)
        # Save as a .png with an identifiable name.
        image_file = os.path.join(
            screens_dir,
            "{0}-{1}x{2}.png".format(file_name, WINDOW_WIDTH, WINDOW_HEIGHT)
        )
        screenshot.save(image_file, format="PNG")

        # Clear the canvas.
        canvas.delete(tk.ALL)
        
    return wrapper


@create_image
def draw_background(file_name, source):
    """ Adding a dummy function for the background only. """

    pass


@create_image
def draw_victory_screen(file_name, source):
    """ A *You Win* message. """

    sketch = { 1: (0,    2,       5,          9),
               2: (0,    2,       5,          9),
               3: (0, 1, 2,       5,    7,    9),
               4: (      2,       5, 6, 7, 8, 9),
               5: (0, 1, 2,       5, 6,    8, 9),
               6: (                            ),
               7: (0, 1, 2,          6, 7, 8   ),
               8: (0,    2,             7      ),
               9: (0,    2,             7      ),
              10: (0, 1, 2,          6, 7, 8   ),
              11: (                            ),
              12: (0,    2,       5, 6,       9),
              13: (0,    2,       5, 6, 7,    9),
              14: (0,    2,       5,    7, 8, 9),
              15: (0, 1, 2,       5,       8, 9),
              16: (                            ),
              17: (                            ),
              18: (                            ),
              19: (                            )}

    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_defeat_screen(file_name, source):
    """ A *Game Over* message. """

    sketch = {0: (   1, 2, 3, 4,       7, 8, 9),
              1: (0,                   7,    9),
              2: (0,    2, 3, 4,       7,    9),
              3: (0,          4,       7, 8, 9),
              4: (   1, 2, 3                  ),          
              5: (                     7,    9),
              6: (   1, 2, 3,          7,    9),
              7: (0,          4,       7,    9),
              8: (0, 1, 2, 3, 4,          8   ),  
              9: (0,          4               ),          
             10: (                     7, 8, 9),
             11: (0,          4,       7      ),    
             12: (0, 1,    3, 4,       7, 8, 9),
             13: (0,    2,    4,       7      ),    
             14: (                     7, 8, 9),
             15: (   1, 2, 3                  ),            
             16: (   1,                7, 8   ),  
             17: (   1, 2, 3,          7,    9),
             18: (   1,                7, 8   ),  
             19: (   1, 2, 3,          7,    9)}

    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_snake_1(file_name, source):
    """ First preview for Snake. """

    sketch = { 0: (                            ),
               1: (                            ),
               2: (                            ),
               3: (      2, 3, 4, 5, 6, 7,     ),
               4: (                            ),
               5: (                            ),
               6: (                            ),
               7: (                     7,     ),
               8: (                            ),
               9: (                            ),
              10: (                            ),
              11: (                            ),
              12: (                            ),
              13: (                            ),
              14: (                            ),
              15: (            4, 5,           ),
              16: (         3,       6,        ),
              17: (         3, 4, 5, 6,        ),
              18: (         3,       6,        ),
              19: (         3,       6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_snake_2(file_name, source):
    """ Second preview for Snake. """

    sketch = { 0: (                            ),
               1: (                            ),
               2: (                            ),
               3: (         3, 4, 5, 6, 7,     ),
               4: (                     7,     ),
               5: (                            ),
               6: (                            ),
               7: (                     7,     ),
               8: (                            ),
               9: (                            ),
              10: (                            ),
              11: (                            ),
              12: (                            ),
              13: (                            ),
              14: (                            ),
              15: (            4, 5,           ),
              16: (         3,       6,        ),
              17: (         3, 4, 5, 6,        ),
              18: (         3,       6,        ),
              19: (         3,       6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_snake_3(file_name, source):
    """ Third preview for Snake. """

    sketch = { 0: (                            ),
               1: (                            ),
               2: (                            ),
               3: (            4, 5, 6, 7,     ),
               4: (                     7,     ),
               5: (                     7,     ),
               6: (                            ),
               7: (                     7,     ),
               8: (                            ),
               9: (                            ),
              10: (                            ),
              11: (                            ),
              12: (                            ),
              13: (                            ),
              14: (                            ),
              15: (            4, 5,           ),
              16: (         3,       6,        ),
              17: (         3, 4, 5, 6,        ),
              18: (         3,       6,        ),
              19: (         3,       6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_breakout_1(file_name, source):
    """ First preview for Breakout. """

    sketch = { 0: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               1: (0,                         9),
               2: (0,                         9),
               3: (0,       3, 4, 5, 6,       9),
               4: (0,       3, 4, 5, 6,       9),
               5: (0,       3, 4, 5, 6,       9),
               6: (0,       3, 4, 5, 6,       9),
               7: (0,                         9),
               8: (0,                         9),
               9: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              10: (                            ),
              11: (               5,           ),
              12: (                            ),
              13: (         3, 4, 5,           ),
              14: (                            ),
              15: (         3, 4, 5,           ),
              16: (         3,       6,        ),
              17: (         3, 4, 5,           ),
              18: (         3,       6,        ),
              19: (         3, 4, 5,           )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_breakout_2(file_name, source):
    """ Second preview for Breakout. """

    sketch = {  0: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                1: (0,                         9),
                2: (0,                         9),
                3: (0,       3, 4, 5, 6,       9),
                4: (0,       3, 4, 5, 6,       9),
                5: (0,       3, 4, 5, 6,       9),
                6: (0,       3, 4, 5, 6,       9),
                7: (0,                         9),
                8: (0,                         9),
                9: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               10: (                  6,        ),
               11: (                            ),
               12: (                            ),
               13: (         3, 4, 5,           ),
               14: (                            ),
               15: (         3, 4, 5,           ),
               16: (         3,       6,        ),
               17: (         3, 4, 5,           ),
               18: (         3,       6,        ),
               19: (         3, 4, 5,           )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_breakout_3(file_name, source):
    """ Third preview for Breakout. """

    sketch = {  0: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
                1: (0,                         9),
                2: (0,                         9),
                3: (0,       3, 4, 5, 6,       9),
                4: (0,       3, 4, 5, 6,       9),
                5: (0,       3, 4, 5, 6,       9),
                6: (0,       3, 4, 5, 6,       9),
                7: (0,                         9),
                8: (0,                         9),
                9: (0, 1, 2, 3, 4, 5,       8, 9),
               10: (                            ),
               11: (                     7,     ),
               12: (                            ),
               13: (            4, 5, 6,        ),
               14: (                            ),
               15: (         3, 4, 5,           ),
               16: (         3,       6,        ),
               17: (         3, 4, 5,           ),
               18: (         3,       6,        ),
               19: (         3, 4, 5,           )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_asteroids_1(file_name, source):
    """ First preview for Asteroids. """

    sketch = {  0: (0, 1, 2, 3,             8, 9),
                1: (0,    2,    4, 5, 6, 7,    9),
                2: (0,    2,                   9),
                3: (0,       3, 4, 5,           ),
                4: (   1,                       ),
                5: (            4,              ),
                6: (                            ),
                7: (                            ),
                8: (                            ),
                9: (                            ),
               10: (                            ),
               11: (                            ),
               12: (            4,              ),
               13: (            4,              ),
               14: (                            ),
               15: (            4, 5, 6,        ),
               16: (         3,                 ),
               17: (         3,                 ),
               18: (         3,                 ),
               19: (            4, 5, 6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_asteroids_2(file_name, source):
    """ Second preview for Asteroids. """

    sketch = {  0: (0, 1, 2, 3,             8, 9),
                1: (0,    2,    4, 5, 6, 7,    9),
                2: (0,    2,                   9),
                3: (0,       3, 4, 5,           ),
                4: (   1,       4,              ),
                5: (                            ),
                6: (                            ),
                7: (                            ),
                8: (                            ),
                9: (                            ),
               10: (                            ),
               11: (            4,              ),
               12: (                            ),
               13: (            4,              ),
               14: (                            ),
               15: (            4, 5, 6,        ),
               16: (         3,                 ),
               17: (         3,                 ),
               18: (         3,                 ),
               19: (            4, 5, 6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_asteroids_3(file_name, source):
    """ Third preview for Asteroids. """

    sketch = {  0: (0, 1, 2, 3,             8, 9),
                1: (0,    2,    4, 5, 6, 7,    9),
                2: (0,    2,                   9),
                3: (0,       3,    5,           ),
                4: (   1,                       ),
                5: (                            ),
                6: (                            ),
                7: (                            ),
                8: (                            ),
                9: (                            ),
               10: (            4,              ),
               11: (                            ),
               12: (                            ),
               13: (            4,              ),
               14: (                            ),
               15: (            4, 5, 6,        ),
               16: (         3,                 ),
               17: (         3,                 ),
               18: (         3,                 ),
               19: (            4, 5, 6,        )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_tetris_1(file_name, source):
    """ First preview for Tetris. """

    sketch = {  0: (                            ),
                1: (         3, 4, 5,           ),
                2: (            4,              ),
                3: (                            ),
                4: (                            ),
                5: (                            ),
                6: (                            ),
                7: (                            ),
                8: (                            ),
                9: (                            ),
               10: (0,                          ),
               11: (0,                          ),
               12: (0, 1, 2,          6, 7,     ),
               13: (0, 1, 2, 3,    5, 6, 7, 8, 9),
               14: (                            ),
               15: (         3, 4, 5,           ),
               16: (         3,       6,        ),
               17: (         3,       6,        ),
               18: (         3,       6,        ),
               19: (         3, 4, 5,           )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_tetris_2(file_name, source):
    """ Second preview for Tetris. """

    sketch = {  0: (                            ),
                1: (                            ),
                2: (         3, 4, 5,           ),
                3: (            4,              ),
                4: (                            ),
                5: (                            ),
                6: (                            ),
                7: (                            ),
                8: (                            ),
                9: (                            ),
               10: (0,                          ),
               11: (0,                          ),
               12: (0, 1, 2,          6, 7,     ),
               13: (0, 1, 2, 3,    5, 6, 7, 8, 9),
               14: (                            ),
               15: (         3, 4, 5,           ),
               16: (         3,       6,        ),
               17: (         3,       6,        ),
               18: (         3,       6,        ),
               19: (         3, 4, 5,           )}
    
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)


@create_image
def draw_tetris_3(file_name, source):
    """ Third preview for Tetris. """

    sketch = { 0: (                            ),
               1: (                            ),
               2: (                            ),
               3: (         3, 4, 5,           ),
               4: (            4,              ),
               5: (                            ),
               6: (                            ),
               7: (                            ),
               8: (                            ),
               9: (                            ),
              10: (0,                          ),
              11: (0,                          ),
              12: (0, 1, 2,          6, 7,     ),
              13: (0, 1, 2, 3,    5, 6, 7, 8, 9),
              14: (                            ),
              15: (         3, 4, 5,           ),
              16: (         3,       6,        ),
              17: (         3,       6,        ),
              18: (         3,       6,        ),
              19: (         3, 4, 5,           )}
        
    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)

# Template for more screens.
'''
@create_image
def draw_newgame_i(file_name, source):
    """ ith preview for Newgame. """
    sketch = { 0: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               1: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               2: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               3: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               4: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               5: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               6: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               7: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               8: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
               9: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              10: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              11: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              12: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              13: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              14: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              15: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              16: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              17: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              18: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
              19: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)}

    for j in sketch.keys():
        for i in sketch[j]:
            Block(i, j, source)
'''


def show_high_scores(source):
    """
    Read, format, and show all entries from `high-scores.json`.

    Parameters
    ----------
    source : Type[Client]
        A class with `window` and `canvas` attributes.

    Raises
    ------
    AbsentWindowOrCanvasError
        If the ``source`` parameter has no correct `window` or `canvas` attribute.
    """

    # Check for correct `source`.
    if not has_window_and_canvas(source):
        raise AbsentWindowOrCanvasError("source")

    # Access the current window and canvas.
    window = source.window
    canvas = source.canvas
    
    # Update the window title.
    window.title("High Scores")
    
    # Set a background with a solid color.
    canvas.create_rectangle(SIZE_CORRECTION + BORDER_WIDTH,
                            SIZE_CORRECTION + BORDER_WIDTH,
                            SIZE_CORRECTION + WINDOW_WIDTH,
                            SIZE_CORRECTION + WINDOW_HEIGHT,
                            fill=BACK_COLOR,
                            width=BORDER_WIDTH,
                            tags="high-scores",
                            )

    # Draw the high scores.
    high_scores = {}
    try:
        # Extract data from the .json file
        with open(high_scores_dir, "r") as file:
            high_scores = json.load(file)
    except Exception as e:
        print(e)
        pass
    # Draw the title on the screen.
    h = DIST_BLOCKS
    text = "HIGH SCORES"
    position = (int(WINDOW_WIDTH/2), h)
    canvas.create_text(*position,
                       anchor=tk.CENTER,  # Centered on top.
                       fill=LINE_COLOR,
                       text=text,
                       font=f"Impact {7*PIXEL_SIDE}",
                       tags="high-scores",
                       )
    # Iterate through the high scores.
    for game_name, score in high_scores.items():
        h += 2*DIST_BLOCKS
        # First row: game names.
        text = game_name
        position = (DIST_BLOCKS, h)
        canvas.create_text(*position,
                           anchor=tk.NW,
                           fill=LINE_COLOR,
                           text=text,
                           font=f"Impact {7*PIXEL_SIDE}",
                           tags="high-scores",
                           )
        # Second row: game scores.
        text = f"{score:07d}"
        position = (WINDOW_WIDTH-DIST_BLOCKS, h)
        canvas.create_text(*position,
                           anchor=tk.NE,
                           fill=LINE_COLOR,
                           text=text,
                           font=f"Inconsolata {7*PIXEL_SIDE} bold",
                           tags="high-scores",
                           )


class Client(BaseClient):
    """ A client to display the images. """

    def __init__(self):
        """ GUI adjustments and image generation. """

        super().__init__()
        # self.window.overrideredirect(True)  # Removes window layout.
        self.window.title("Generating images...")
        self.window.geometry(
            f"{WINDOW_WIDTH+2*WHITE_BORDER}x{WINDOW_HEIGHT+2*WHITE_BORDER}+0+0"
        )
        self.window.update()
        sleep(2)  # Let the window open properly.

        # Draw general images.
        draw_background("background", Client)
        draw_victory_screen("victory_screen", Client)
        draw_defeat_screen("defeat_screen", Client)

        # Create game previews.
        draw_snake_1("snake_1", Client)
        draw_snake_2("snake_2", Client)
        draw_snake_3("snake_3", Client)
        draw_breakout_1("breakout_1", Client)
        draw_breakout_2("breakout_2", Client)
        draw_breakout_3("breakout_3", Client)
        draw_asteroids_1("asteroids_1", Client)
        draw_asteroids_2("asteroids_2", Client)
        draw_asteroids_3("asteroids_3", Client)
        draw_tetris_1("tetris_1", Client)
        draw_tetris_2("tetris_2", Client)
        draw_tetris_3("tetris_3", Client)

        # Close the window when finishing.
        self.window.quit()


def main():
    """ Output-generating commands. """

    print(
        "Some or all the necessary images to load the Brickgame are missing."
    )
    cond1 = input("Do you wish to load them now? [Y/N]: ")
    if (cond1 in ["Y", "y"] or
            cond1.lower() == "yes" or
            cond1.startswith("yes") or
            cond1.startswith("YES") or
            cond1.startswith("Yes")):
        print(
            "WARNING: All images will be generated by being *RAPIDLY FLASHED*, ",
            "screenshotted, and saved to `",
            screens_dir,
            "` for about 5 seconds.",
            sep=""
        )
        cond2 = input("Continue? [Y/N]: ")
        if (cond2 in ["Y", "YY", "YYY", "y", "yy", "yyy"] or
                cond2.lower().startswith("yes")):
            Client()
            print("To play the Brickgame,",
                  "now run: `python -m brickgame_tkinter`",
                  sep=" ")
    exit()


if __name__ == '__main__':
    main()
